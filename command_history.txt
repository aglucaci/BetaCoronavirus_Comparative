# Dependencies (Installers)
# MAFFT (already installed)
bash install_hyphy.sh
bash install_tn93.sh
bash install_raxml.sh


# Step 1a - Split out ViPR results, gene by gene for each viral species
bash blastn_genebygene.sh

# Step 1b - QA on blastn, this filters the results of blastn search that have less than 99% NT content for that gene
# meaning, it filters out sequences that are less than 99% of the sequence length
python36 QA_blastn.py

# Step 2a - Perform a codon-aware msa and create a phylogenetic tree
qsub -V -q epyc -l nodes=1:ppn=16 -N BLASTN_CODON_AWARE_MSA run_blastn_codon_aware_msa.sh

# Step 2b - Can implement a MAF (1%) filter here.

# Step 2c
qsub -V -l nodes=1:ppn=16 -q epyc run_compressed_aln_raxml.sh

# Step 2d - Gap analysis for codon aware msa

# Step 3a - Perform a TN93 distance calculation (on codon aware msa)
qsub -V -q epyc tn93_codons.sh
#qsub -V -q epyc tn93.sh

# Step 3b - TN93 Cluster analysis
qsub -V -q epyc tn93_cluster.sh

# Step 4 - Selection Analyses
qsub -V -q epyc -l nodes=1:ppn=28 MEME_BUSTEDS_aBSREL.sh

# Step 5 - use MAFFT Merge to merge the alignments across genes, and then construct ML Trees.
qsub -V -q epyc -l nodes=1:ppn=16 MergeAlignments.sh

# Step 6 - Partition lineages
bash launcher_for_annotator.sh 

# Step 7 - Run RELAX and Constrast-FEL
qsub -V -q epyc RELAX_CONTRAST-FEL.sh

# Step 8 - (local analysis)
#Branch length distributions on raxml trees
#'Gap analysis' on codon aware alignments
#TN93 on codon aware alignment
#TN93 Clustering 
